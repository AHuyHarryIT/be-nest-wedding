// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum OrderStatus {
  UNPAID
  PARTIAL
  PAID
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  CREDIT_CARD
  E_WALLET
}

enum PaymentStatus {
  PENDING
  SUCCESSFUL
  FAILED
  REFUNDED
}

enum VisibilityLevel {
  PUBLIC
  PRIVATE
  UNLISTED
}

model User {
  id                 String         @id @default(uuid())
  phoneNumber        String         @unique
  passwordHash       String
  firstName          String?
  lastName           String?
  email              String?
  avatarUrl          String?
  isActive           Boolean        @default(true)
  refreshToken       String?
  refreshTokenExpiry DateTime?
  // relation
  roles        UserRole[]
  bookings     Booking[]
  sessions     SessionStaff[]
  files        File[]
  albums       Album[]
  orders       Order[]
  // timestamps
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
}

model Role {
  id          String           @id @default(uuid())
  name        String           @unique
  description String?
  // relation
  users       UserRole[]
  permissions RolePermission[]
  // timestamps
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Permission {
  id          String           @id @default(uuid())
  key         String           @unique
  description String?
  // relation
  roles       RolePermission[]
  // timestamps
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model UserRole {
  userId String
  roleId String
  // relation
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([roleId])
}

model RolePermission {
  roleId       String
  permissionId String
  // relation
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@index([permissionId])
}

model Product {
  id          String  @id @default(uuid())
  name        String
  description String?
  price       Float   @default(0)
  stockQty    Int     @default(0)
  isActive    Boolean @default(false)

  // relation
  inventoryReservations InventoryReservation[]

  // timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?
}

model Service {
  id          String  @id @default(uuid())
  name        String
  slug        String? @unique
  description String?
  price       Float   @default(0)
  isActive    Boolean @default(false)

  // relation
  packages PackageService[]
  sessions SessionService[]

  // timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?
}

model Package {
  id          String  @id @default(uuid())
  name        String
  slug        String? @unique
  description String?
  price       Float   @default(0)
  isActive    Boolean @default(false)

  // relation
  services PackageService[]
  bookings Booking[]

  // timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?
}

model PackageService {
  packageId String
  serviceId String
  // relation
  package   Package @relation(fields: [packageId], references: [id], onDelete: Cascade)
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([packageId, serviceId])
  @@index([serviceId])
}

model Booking {
  id          String           @id @default(uuid())
  customerId  String
  packageId   String
  notes       String?
  status      BookingStatus    @default(PENDING)
  eventDate   DateTime
  totalPrice  Float            @default(0)
  cancelledAt DateTime?
  // relation
  customer    User             @relation(fields: [customerId], references: [id], onDelete: Cascade)
  package     Package          @relation(fields: [packageId], references: [id], onDelete: Cascade)
  sessions    BookingSession[]
  albums      Album[]
  orders      Order[]
  // timestamps
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now())
  deletedAt   DateTime?

  @@index([customerId, packageId, status, createdAt])
}

model BookingSession {
  id           String        @id @default(uuid())
  bookingId    String
  title        String
  locationName String?
  address      String?
  startsAt     DateTime
  endsAt       DateTime
  status       BookingStatus @default(PENDING)

  // relation
  booking               Booking                @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  staffs                SessionStaff[]
  services              SessionService[]
  inventoryReservations InventoryReservation[]

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([bookingId])
  @@index([startsAt, endsAt])
  @@index([status])
}

model SessionStaff {
  sessionId String
  staffId   String

  // relation
  session BookingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  staff   User           @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@id([sessionId, staffId])
}

model SessionService {
  sessionId String
  serviceId String
  price     Float  @default(0)

  // relation
  session BookingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  service Service        @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@id([sessionId, serviceId])
}

model InventoryReservation {
  id         String   @id @default(uuid())
  productId  String
  sessionId  String
  quantity   Int
  reservedAt DateTime @default(now())

  // relation
  product Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  session BookingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model Order {
  id          String      @id @default(uuid())
  bookingId   String
  customerId  String
  totalAmount Float       @default(0)
  status      OrderStatus @default(UNPAID)

  // relation
  booking  Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  customer User      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  payments Payment[]

  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String
  amount        Float
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  providerTxnId String?
  paidAt        DateTime      @default(now())

  // relation
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  
  // timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
}

// Media and Albums
model File {
  id         String          @id @default(uuid())
  uploaderId String
  storageKey String
  storageUrl String
  mimeType   String
  byteSize   Int
  width      Int?
  height     Int?
  checksum   String?         @unique
  usageType  String
  visibility VisibilityLevel @default(PRIVATE)

  // relation
  uploader    User        @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  albums      AlbumFile[]
  coverAlbums Album[]

  // timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Album {
  id          String    @id @default(uuid())
  ownerUserId String
  bookingId   String?
  title       String
  description String?
  isPublic    Boolean   @default(false)
  share_token String?   @unique
  expiresAt   DateTime?
  coverFileId String?

  // relation
  owner     User        @relation(fields: [ownerUserId], references: [id], onDelete: Cascade)
  booking   Booking?    @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  coverFile File?       @relation(fields: [coverFileId], references: [id], onDelete: Cascade)
  files     AlbumFile[]

  // timestamps
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model AlbumFile {
  albumId   String
  fileId    String
  sortOrder Int     @default(0)
  caption   String?

  // relation
  file  File  @relation(fields: [fileId], references: [id])
  album Album @relation(fields: [albumId], references: [id])

  // timestamps
  createdAt DateTime @default(now())

  @@id([albumId, fileId])
  @@index([fileId])
}

// Audit Logs
// model ActivityLog {
//   id          String   @id @default(uuid())
//   actorId     String?
//   action      String
//   targetTable String
//   targetId    String?
//   changes     Json
//   ipAddress   String?
//   createdAt   DateTime @default(now())

//   // relation
//   actor User? @relation(fields: [actorId], references: [id], onDelete: Cascade)
// }
